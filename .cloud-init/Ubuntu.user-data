#cloud-config

# SPDX-License-Identifier: MIT

# https://github.com/microsoft/WSL/blob/master/distributions/DistributionInfo.json

# Configuration for Ubuntu 24.04 LTS running on WSL; install
# at the path %USERPROFILE%\.cloud-init

# wsl.exe --shutdown
# wsl.exe --update
# wsl.exe --unregister Ubuntu
# wsl.exe --install Ubuntu
# wsl.exe --distribution Ubuntu
# cloese and restart Windows Terminal
# start Ubuntu from Windows Terminal

locale: en_US.UTF-8
timezone: America/Chicago

# apt:
#   http_proxy: http://windows_user:windows_password@10.63.136.30:8080/
#   https_proxy: http://windows_user:windows_password@10.63.136.30:8080/

power_state:
  delay: now
  mode: poweroff
  message: Powering off
  timeout: 60
  condition: true

groups:
- docker

users:
- name: user
  gecos: Default instance user
  no-user-group: false
  plain_text_passwd: 'password'
  groups: [adm, dialout, cdrom, floppy, sudo, audio, dip, video, plugdev, netdev, docker]
  shell: /bin/bash
  sudo:
  - ALL=(ALL) NOPASSWD:ALL
- name: dockremap
  uid: 967
  gecos: Docker rootless remap
  system: true
  no-user-group: false
  groups: [docker]
  shell: /usr/sbin/nologin
  lock_passwd: true
- name: runner
  uid: 968
  gecos: Automated CI/CD
  system: true
  no-user-group: false
  groups: [docker]
  shell: /bin/bash
  lock_passwd: true
  # sudo:
  # - ALL=(ALL) NOPASSWD:/usr/bin/apt-get install *
  # - ALL=(ALL) NOPASSWD:/usr/sbin/locale-gen *

write_files:
- path: /etc/wsl.conf
  append: true
  content: |
    [user]
    default=user
    [automount]
    enabled=true
    options="case=dir,umask=077,fmask=077,dmask=077"
- path: /etc/wslconfig.conf
  append: false
  permissions: '0644'
  content: |
    # EXAMPLE: Install at %USERPROFILE%\.wslconfig
    # [wsl2]
    # memory=32G
    # processors=12
    # defaultVhdSize=549755813888
    # networkingMode=mirrored
    # autoProxy=false
    # dnsProxy=false
    # kernelCommandLine=cgroup_no_v1=all
    # [experimental]
    # autoMemoryReclaim=dropcache
    # sparseVhd=true
- path: /etc/bash.bashrc
  append: true
  defer: true
  content: |
    # WSL Instance
    if [[ "$USER" != "root" && -n "$USERPROFILE" && -d "$USERPROFILE" ]] ; then
      mkdir -p "$USERPROFILE/.config" && ln -sf "$USERPROFILE/.config" $HOME/.config && rm -f $HOME/.config/.config
      mkdir -p "$USERPROFILE/.gnupg" && ln -sf "$USERPROFILE/.gnupg" $HOME/.gnupg && rm -f $HOME/.gnupg/.gnupg
      mkdir -p "$USERPROFILE/.local" && ln -sf "$USERPROFILE/.local" $HOME/.local && rm -f $HOME/.local/.local
      [[ -d $HOME/.ssh && ! -h $HOME/.ssh ]] && rm -fr $HOME/.ssh
      mkdir -p "$USERPROFILE/.ssh" && ln -sf "$USERPROFILE/.ssh" $HOME/.ssh && rm -f $HOME/.ssh/.ssh
      touch "$USERPROFILE/.netrc" && ln -sf "$USERPROFILE/.netrc" $HOME/.netrc
      touch "$USERPROFILE/.s3cfg" && ln -sf "$USERPROFILE/.s3cfg" $HOME/.s3cfg
    fi
- path: /etc/fstab
  append: true
  defer: true
  content: |
    # drvfs mount to a drive letter
    # M: /mnt/m drvfs rw,noatime,uid=user,gid=user,case=dir,umask=077,fmask=077,dmask=077,x-mount.mkdir 0 0
    # O: /mnt/o drvfs rw,noatime,uid=user,gid=user,case=dir,umask=077,fmask=077,dmask=077,x-mount.mkdir 0 0
    # bind mount to windows_user home
    # /mnt/c/Users/windows_user /mnt/home none bind,default,x-mount.mkdir 0 0
    # cifs requires /etc/smbcredentials
    # //192.168.1.10/shared/artifacts /mnt/artifacts cifs vers=3,user,rw,credentials=/etc/smbcredentials,iocharset=utf8,uid=user,forceuid,gid=user,forcegid,noauto,x-mount.mkdir,x-systemd.automount 0 0
    # //192.168.1.10/shared/downloads /mnt/downloads cifs vers=3,user,rw,credentials=/etc/smbcredentials,iocharset=utf8,uid=user,forceuid,gid=user,forcegid,noauto,x-mount.mkdir,x-systemd.automount 0 0
    # //192.168.1.10/shared/sstate-cache /mnt/sstate-cache cifs vers=3,user,rw,credentials=/etc/smbcredentials,iocharset=utf8,uid=user,forceuid,gid=user,forcegid,noauto,x-mount.mkdir,x-systemd.automount 0 0
- path: /etc/sysctl.d/wsl-settings.conf
  append: false
  defer: false
  permissions: '0644'
  content: |
    fs.inotify.max_user_watches = 524288
    kernel.apparmor_restrict_unprivileged_userns = 0
    net.ipv4.ip_unprivileged_port_start = 0
    net.ipv4.conf.all.forwarding = 1
    net.ipv4.conf.default.forwarding = 1
    net.ipv6.ip_unprivileged_port_start = 0
    net.ipv6.conf.all.forwarding = 1
    net.ipv6.conf.default.forwarding = 1
- path: /etc/subgid
  append: true
  defer: true
  content: |
    runner:4294936224:65536
    dockremap:4294936224:65536
- path: /etc/subuid
  append: true
  defer: true
  content: |
    runner:4294936224:65536
    dockremap:4294936224:65536
- path: /etc/smbcredentials
  append: false
  defer: false
  permissions: '0600'
  content: |
    username=windows_user
    password=windows_password
- path: /etc/docker/daemon.json
  append: false
  defer: false
  permissions: '0644'
  content: |
    {
      "experimental": false,
      "exec-opts": ["native.cgroupdriver=systemd"],
      "data-root": "/var/lib/docker",
      "log-driver": "journald",
      "log-level": "info",
      "insecure-registries": [],
      "registry-mirrors": [],
      "ip-forward": true,
      "ip-masq": true,
      "iptables": true,
      "ip6tables": true
    }

package_reboot_if_required: true
package_update: true
package_upgrade: true
packages:
- build-essential
- chrpath
- cpio
- debianutils
- diffstat
- file
- gawk
- gcc
- git
- iputils-ping
- libacl1
- liblz4-tool
- locales
- python3
- python3-git
- python3-jinja2
- python3-pexpect
- python3-pip
- python3-subunit
- socat
- texinfo
- unzip
- wget
- xz-utils
- zstd
- apt-transport-https
- ca-certificates
- cifs-utils
- curl
- file
- git-lfs
- gnupg-agent
- jq
- libacl1
- liblz4-tool
- libxml2-utils
- rsync
- s3cmd
- software-properties-common
- time
- uidmap

runcmd:
- |
  setx.exe GNUPGHOME '%USERPROFILE%\.gnupg'
  setx.exe WSLENV 'USERNAME:USERPROFILE/p'
- |
  install -d -m 1777 /srv/repo
  install -d -m 0775 /srv/actions-runner && chown -R runner:runner /srv/actions-runner
- |
  source /etc/os-release
  install -d -m 0755 /etc/apt/keyrings
  install -d -m 0755 /etc/apt/sources.list.d
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu noble stable" >/etc/apt/sources.list.d/docker-ce.list
  curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg -o /etc/apt/keyrings/github-cli.gpg
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/github-cli.gpg] https://cli.github.com/packages stable main" >/etc/apt/sources.list.d/github-cli.list
- |
  apt-get update
  apt-get -y -qq install gh
  apt-get -y -qq install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
  systemctl disable --now docker.service docker.socket
- |
  curl -fsSL https://storage.googleapis.com/git-repo-downloads/repo >/usr/local/bin/repo
  chmod 755 /usr/local/bin/repo
